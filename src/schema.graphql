type Category {
	id: ID
	name: String!
	restaurants: [Restaurant]
}

type CategoryConnection {
	items: [Category]
	nextToken: String
}

type City {
	id: ID!
	name: String!
	restaurants: [Restaurant]
}

type CityConnection {
	items: [City]
	nextToken: String
}

type Comment {
	restaurantId: ID!
	commentId: String!
	content: String!
	createdAt: String!
}

type CommentConnection {
	items: [Comment]
	nextToken: String
}

input CreateCategoryInput {
	name: String!
}

input CreateCityInput {
	name: String!
}

input CreateCommentInput {
	restaurantId: ID!
	commentId: String!
	content: String!
	createdAt: String!
}

input CreateRestaurantInput {
	name: String!
	address: String
	category: String!
	city: String!
	comments: [String]
	rate: Float
}

input DeleteCategoryInput {
	id: ID!
}

input DeleteCityInput {
	id: ID!
}

input DeleteCommentInput {
	commentId: String!
}

input DeleteRestaurantInput {
	id: ID!
}

type Mutation {
	createRestaurant(input: CreateRestaurantInput!): Restaurant
	updateRestaurant(input: UpdateRestaurantInput!): Restaurant
	deleteRestaurant(input: DeleteRestaurantInput!): Restaurant
	createCity(input: CreateCityInput!): City
	updateCity(input: UpdateCityInput!): City
	deleteCity(input: DeleteCityInput!): City
	createComment(input: CreateCommentInput!): Comment
	updateComment(input: UpdateCommentInput!): Comment
	deleteComment(input: DeleteCommentInput!): Comment
	createCategory(input: CreateCategoryInput!): Category
	updateCategory(input: UpdateCategoryInput!): Category
	deleteCategory(input: DeleteCategoryInput!): Category
}

type Query {
	getRestaurant(id: ID!): Restaurant
	listRestaurants(filter: TableRestaurantFilterInput, limit: Int, nextToken: String): RestaurantConnection
	getCity(id: ID!): City
	listCities(filter: TableCityFilterInput, limit: Int, nextToken: String): CityConnection
	getComment(commentId: String!): Comment
	listComments(filter: TableCommentFilterInput, limit: Int, nextToken: String): CommentConnection
	getCategory(id: ID!): Category
	listCategories(filter: TableCategoryFilterInput, limit: Int, nextToken: String): CategoryConnection
}

type Restaurant {
	id: ID!
	name: String!
	address: String
	category: String!
	categoryID: ID!
	city: String!
	cityID: ID!
	comments: [String]
	rate: Float
}

type RestaurantConnection {
	items: [Restaurant]
	nextToken: String
}

type Subscription {
	onCreateRestaurant(
		id: ID,
		name: String,
		address: String,
		category: String,
		city: String
	): Restaurant
		@aws_subscribe(mutations: ["createRestaurant"])
	onUpdateRestaurant(
		id: ID,
		name: String,
		address: String,
		category: String,
		city: String
	): Restaurant
		@aws_subscribe(mutations: ["updateRestaurant"])
	onDeleteRestaurant(
		id: ID,
		name: String,
		address: String,
		category: String,
		city: String
	): Restaurant
		@aws_subscribe(mutations: ["deleteRestaurant"])
	onCreateCity(id: ID, name: String): City
		@aws_subscribe(mutations: ["createCity"])
	onUpdateCity(id: ID, name: String): City
		@aws_subscribe(mutations: ["updateCity"])
	onDeleteCity(id: ID, name: String): City
		@aws_subscribe(mutations: ["deleteCity"])
	onCreateComment(
		restaurantId: ID,
		commentId: String,
		content: String,
		createdAt: String
	): Comment
		@aws_subscribe(mutations: ["createComment"])
	onUpdateComment(
		restaurantId: ID,
		commentId: String,
		content: String,
		createdAt: String
	): Comment
		@aws_subscribe(mutations: ["updateComment"])
	onDeleteComment(
		restaurantId: ID,
		commentId: String,
		content: String,
		createdAt: String
	): Comment
		@aws_subscribe(mutations: ["deleteComment"])
	onCreateCategory(id: ID, name: String): Category
		@aws_subscribe(mutations: ["createCategory"])
	onUpdateCategory(id: ID, name: String): Category
		@aws_subscribe(mutations: ["updateCategory"])
	onDeleteCategory(id: ID, name: String): Category
		@aws_subscribe(mutations: ["deleteCategory"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableCategoryFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
}

input TableCityFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
}

input TableCommentFilterInput {
	restaurantId: TableIDFilterInput
	commentId: TableStringFilterInput
	content: TableStringFilterInput
	createdAt: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableRestaurantFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	address: TableStringFilterInput
	category: TableStringFilterInput
	city: TableStringFilterInput
	comments: TableStringFilterInput
	rate: TableFloatFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateCategoryInput {
	id: ID!
	name: String
}

input UpdateCityInput {
	id: ID!
	name: String
}

input UpdateCommentInput {
	restaurantId: ID
	commentId: String!
	content: String
	createdAt: String
}

input UpdateRestaurantInput {
	id: ID!
	name: String
	address: String
	category: String
	city: String
	comments: [String]
	rate: Float
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}