type Comment {
	id: ID!
	restaurantId: ID!
	content: String!
	createdAt: String!
}

type CommentConnection {
	items: [Comment]
	nextToken: String
}

input CommentOnRestaurantInput {
	restaurantId: ID!
	content: String!
	createdAt: String!
}

input CreateRestaurantInput {
	name: String!
	address: String
	category: String!
	city: String!
	comments: [String]
}

input DeleteCommentInput {
	id: ID!
}

input DeleteRestaurantInput {
	id: ID!
}

type Mutation {
	createRestaurant(input: CreateRestaurantInput!): Restaurant
	updateRestaurant(input: UpdateRestaurantInput!): Restaurant
	deleteRestaurant(input: DeleteRestaurantInput!): Restaurant
	commentOnRestaurant(input: CommentOnRestaurantInput!): Comment
	updateComment(input: UpdateCommentInput!): Comment
	deleteComment(input: DeleteCommentInput!): Comment
}

type Query {
	getRestaurant(id: ID!): Restaurant
	listRestaurants(filter: TableRestaurantFilterInput, limit: Int, nextToken: String): RestaurantConnection
	getComment(id: ID!): Comment
  listComments(filter: TableCommentFilterInput, limit: Int, nextToken: String): CommentConnection
}

type Restaurant {
	id: ID!
	name: String!
	address: String
	category: String!
	city: String!
	comments(limit: Int, nextToken: String): CommentConnection
}

type RestaurantConnection {
	items: [Restaurant]
	nextToken: String
}

type Subscription {
	onCreateRestaurant(
		id: ID,
		name: String,
		address: String,
		category: String,
		city: String
	): Restaurant
		@aws_subscribe(mutations: ["createRestaurant"])
	onUpdateRestaurant(
		id: ID,
		name: String,
		address: String,
		category: String,
		city: String
	): Restaurant
		@aws_subscribe(mutations: ["updateRestaurant"])
	onDeleteRestaurant(
		id: ID,
		name: String,
		address: String,
		category: String,
		city: String
	): Restaurant
		@aws_subscribe(mutations: ["deleteRestaurant"])
	onCreateComment(
		restaurantId: ID,
		id: ID,
		content: String,
		createdAt: String
	): Comment
		@aws_subscribe(mutations: ["commentOnRestaurant"])
	onUpdateComment(
		restaurantId: ID,
		id: ID,
		content: String,
		createdAt: String
	): Comment
		@aws_subscribe(mutations: ["updateComment"])
	onDeleteComment(
		restaurantId: ID,
		id: ID,
		content: String,
		createdAt: String
	): Comment
		@aws_subscribe(mutations: ["deleteComment"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableRestaurantFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	address: TableStringFilterInput
	category: TableStringFilterInput
	city: TableStringFilterInput
	comments: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateCommentInput {
	restaurantId: ID
	id: ID!
	content: String
	createdAt: String!
}

input UpdateRestaurantInput {
	id: ID!
	name: String
	address: String
	category: String
	city: String
	comments: [String]
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}